<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drew Blessing</title>
    <description>System Administrator by trade. Developer and open-source enthusiast at heart. Posts may cover DevOps, Chef, GitLab, Ruby, various open-source projects and whatever else I&#39;m interested in at the time.
</description>
    <link>http://blessing.io/</link>
    <atom:link href="http://blessing.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 27 Jun 2015 13:22:25 -0500</pubDate>
    <lastBuildDate>Sat, 27 Jun 2015 13:22:25 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Fun with Ruby Arrays</title>
        <description>&lt;p&gt;This week alone I have lost hours of my life to strange behavior with Ruby arrays and hashes.
Now that I know what&amp;#39;s going on it all makes sense but I can see how someone can easily be
confused by this. I&amp;#39;m sharing it in hopes that others might avoid the same pitfall
and as a reminder to myself in the future.&lt;/p&gt;

&lt;h2&gt;Arrays&lt;/h2&gt;

&lt;p&gt;The issue I ran into with arrays involves iteration. Specifically, while iterating over an array
I was also selectively deleting that item from the array if it matched some criteria. What I found
is that I was &amp;#39;randomly&amp;#39; failing to iterate over some values in my array.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an example of what I was doing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;current_rules = [
  { rule_number: 100, action: :deny, protocol: -1, cidr_block: &amp;#39;10.0.0.0/24&amp;#39;, egress: false, port_range: -1 },
]
desired_rules = [
  { rule_number: 100, action: :deny, protocol: -1, cidr_block: &amp;#39;10.0.0.0/24&amp;#39; },
  { rule_number: 200, action: :allow, protocol: -1, cidr_block: &amp;#39;0.0.0.0/0&amp;#39; },
  { rule_number: 300, action: :allow, protocol: 6, port_range: 22..23, cidr_block: &amp;#39;172.31.0.0/22&amp;#39; }
]

desired_rules.each do |desired_rule|
  # The array elements (hashes) don&amp;#39;t match exactly. Rule number match is what we&amp;#39;re looking for,
  # but the rest of the hash keys will be different.
  matching_rule = current_rules.select { |r| r[:rule_number] == desired_rule[:rule_number]}.first
  if matching_rule
    # Anything unhandled will be removed
    current_rules.delete(matching_rule)
    # Anything unhandled will be added
    desired_rules.delete(desired_rule)

    if matching_rule.merge(desired_rule) != matching_rule
      # Replace anything with a matching rule number but different attributes
      replace_rules &amp;lt;&amp;lt; desired_rule
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since &lt;code&gt;current_rules&lt;/code&gt; and &lt;code&gt;desired_rules&lt;/code&gt; both have &lt;code&gt;rule_number: 100&lt;/code&gt; they are deleted from both arrays.
That seems fine, but what happened when that element got removed from the &lt;code&gt;desired_rules&lt;/code&gt; array I am currently
iterating over?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;desired_rules&lt;/code&gt; now looks like this:
&lt;code&gt;
[
  {:rule_number=&amp;gt;200, :action=&amp;gt;:allow, :protocol=&amp;gt;-1, :cidr_block=&amp;gt;&amp;quot;0.0.0.0/0&amp;quot;},
  {:rule_number=&amp;gt;300, :action=&amp;gt;:allow, :protocol=&amp;gt;6, :port_range=&amp;gt;22..23, :cidr_block=&amp;gt;&amp;quot;172.31.0.0/22&amp;quot;}
]
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All the remaining elements in the array shifted forwarded by one index. Element with
&lt;code&gt;rule_number: 200&lt;/code&gt; shifted from index &lt;code&gt;1&lt;/code&gt; to index &lt;code&gt;0&lt;/code&gt;. The next iteration over the array is index &lt;code&gt;1&lt;/code&gt;, now
&lt;code&gt;rule_number: 300&lt;/code&gt;. Whoops!&lt;/p&gt;

&lt;p&gt;Knowing the issue here is most of the battle. The solution is rather easy - just clone the array before iterating:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;desired_rules.clone.each do |desired_rule|
  ...
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;desired_rules&lt;/code&gt; elements still shift one index forward but we&amp;#39;re iterating over a clone that is unaffected by the
delete action.&lt;/p&gt;

&lt;p&gt;Special thanks to Christopher Webber (@cwebber) for suggesting this post. It&amp;#39;s a great, small topic to get my blog
off the ground. I will remember to blog about small issues like this more in the future.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jun 2015 07:50:00 -0500</pubDate>
        <link>http://blessing.io/ruby/2015/06/27/fun-with-ruby-arrays.html</link>
        <guid isPermaLink="true">http://blessing.io/ruby/2015/06/27/fun-with-ruby-arrays.html</guid>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Welcome</title>
        <description>&lt;p&gt;Soon I will have some posts. Check back soon!&lt;/p&gt;
</description>
        <pubDate>Sat, 09 May 2015 10:42:17 -0500</pubDate>
        <link>http://blessing.io/welcome/2015/05/09/welcome.html</link>
        <guid isPermaLink="true">http://blessing.io/welcome/2015/05/09/welcome.html</guid>
        
        
        <category>welcome</category>
        
      </item>
    
  </channel>
</rss>
